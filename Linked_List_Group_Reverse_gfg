class Solution {
  public:
  
    Node* reverseLL(Node* head){
        Node* temp = head;
        Node* prev = NULL;
        while(temp){
            Node* nextnode = temp->next;
            temp->next = prev;
            prev = temp;
            temp = nextnode;
        }
        return prev;
    }
   
   Node* findKthNode(Node* head , int k){
       Node* temp  = head;
       int cnt = 0;
       while(temp){
           if (cnt == k-1) return temp;
           temp = temp->next;
           cnt++;
           
       }
       return NULL;
   }
    Node *reverseKGroup(Node *head, int k) {
        // code here
        Node* prevnode = NULL;
        Node* temp = head;
        Node* newhead = NULL;
        
        while(temp){
            
            Node* Kthnode = findKthNode(temp , k);
            if (Kthnode == NULL){
                
                    Node* lasthead = reverseLL(temp);
                    if (prevnode){
                      prevnode->next = lasthead;
                      
                        
                    }
                    else{
                        newhead = lasthead;
                    }
                    break;
              
            }
            Node* nextnode = Kthnode->next;
            Kthnode->next = NULL;
            reverseLL(temp);
            if (temp == head){
                head = Kthnode;
            }
            else{
                prevnode->next = Kthnode;
            }
            prevnode = temp;
            temp = nextnode;
        }
        
       return newhead!=NULL?newhead:head;
    }
};
