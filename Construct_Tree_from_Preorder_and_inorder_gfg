class Solution {
  public:
    unordered_map<int,int> mp;
    // int n = inorder.size();
    Node* solve(vector<int> &preorder, int s , int e , int &preidx){
        if(s>e) return NULL;
        int val = mp[preorder[preidx]];
        Node* root = new Node(preorder[preidx++]);
        root->left = solve(preorder,s,val-1,preidx);
        
        root->right = solve(preorder , val+1,e,preidx);
        
        return root;
    }
    // Function to build the tree from given inorder and preorder traversals
    Node *buildTree(vector<int> &inorder, vector<int> &preorder) {
        // code here
        
        
        for(int i = 0 ; i < inorder.size();i++){
            mp[inorder[i]]=i;
        }
        
        int preidx = 0;
        return solve(preorder,0,preorder.size()-1,preidx);
        
        
        
         
        
    }
};
