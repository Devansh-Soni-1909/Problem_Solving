class Solution {
  public:
    //Function to serialize a tree and return a list containing nodes of tree.
    vector<int> serialize(Node *root) 
    {
        //Your code here
        vector<int>ans;
        
        queue<Node*>q;
        q.push(root);
                                 
        while(!q.empty()){
            
            Node* newNode=q.front();
            q.pop();
            
           if(newNode==NULL){
               ans.push_back(-1);
           }
            else{
                ans.push_back(newNode->data);
                q.push(newNode->left);
                q.push(newNode->right);
            }
      
            
            
            
        }
        return ans;
     
        
    }
    
    //Function to deserialize a list and construct the tree.
    Node * deSerialize(vector<int> &A)
    {
       //Your code here
       Node* root=new Node(A[0]);
       queue<Node*>q;
       q.push(root);
                                        
       for(int i=1;i<A.size();i=i+2){               
                                                        
          Node* temp=q.front();
          q.pop();
           
           if(A[i]!=-1){
               temp->left=new Node(A[i]);
               q.push(temp->left);
           }
           if(A[i]==-1){
               temp->left=NULL;         
               }
             if(A[i+1]!=-1){
               temp->right=new Node(A[i+1]);
                q.push(temp->right);
           }
           if(A[i+1]==-1){
               temp->right=NULL;     
               }
           
       }
           
           
       
       
       return root;
       
    }

};
