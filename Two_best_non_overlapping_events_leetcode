class Solution {
public:
    int findNextInterval(vector<vector<int>>& events, int low) {
        int key = events[low - 1][1];
        int high = events.size() - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (events[mid][0] > key) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return low;
    }
    int maxTwoEvents(vector<vector<int>>& events) {
        sort(events.begin(), events.end());
        int n = events.size();
        vector<int> maxValue(n);
        maxValue[n - 1] = events[n - 1][2];
        for (int i = n - 2; i >= 0; i--) {
            maxValue[i] = max(events[i][2], maxValue[i + 1]);
        }
        int maxi = 0;
        for (int i = 0; i < n; i++) {
            int index = findNextInterval(events, i + 1);
            maxi = max(maxi, events[i][2] + (index == n ? 0 : maxValue[index]));
        }
        return maxi;
    }
};
